#!/usr/bin/env python3
"""
generate_configs.py
-------------------
–ì–µ–Ω–µ—Ä–∞—Ü–∏—è WireGuard-–∫–æ–Ω—Ñ–∏–≥–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π VPN-—Å–µ—Ä–≤–∏—Å–∞.
–°–æ–∑–¥–∞—ë—Ç –ø—Ä–∏–≤–∞—Ç–Ω—ã–π/–ø—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á, IP-–∞–¥—Ä–µ—Å –∏ —Ñ–∞–π–ª client.conf.
"""

import os
import json
import logging
import subprocess
from pathlib import Path
from ipaddress import ip_network

# ---------------- SETTINGS ----------------
WG_DIR = Path("/etc/wireguard/keys")
CONFIG_DIR = Path("./generated-configs")
NETWORK = ip_network("10.8.0.0/24")
SERVER_ENDPOINT = "vpn.example.com:51820"
SERVER_PUBLIC_KEY = "SERVER_PUBLIC_KEY_PLACEHOLDER"

# ---------------- LOGGER ----------------
logging.basicConfig(
    level=logging.INFO,
    format="[%(asctime)s] %(levelname)s: %(message)s"
)

# ---------------- UTILITIES ----------------
def generate_keypair() -> tuple[str, str]:
    """–°–æ–∑–¥–∞—ë—Ç –ø–∞—Ä—É –ø—Ä–∏–≤–∞—Ç–Ω—ã–π/–ø—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á —á–µ—Ä–µ–∑ wg."""
    private_key = subprocess.check_output(["wg", "genkey"]).decode().strip()
    public_key = subprocess.check_output(["wg", "pubkey"], input=private_key.encode()).decode().strip()
    return private_key, public_key

def allocate_ip(used_ips: set[str]) -> str:
    """–ù–∞—Ö–æ–¥–∏—Ç –ø–µ—Ä–≤—ã–π —Å–≤–æ–±–æ–¥–Ω—ã–π IP –∏–∑ –¥–∏–∞–ø–∞–∑–æ–Ω–∞."""
    for ip in NETWORK.hosts():
        if str(ip) not in used_ips:
            return str(ip)
    raise RuntimeError("–ù–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö IP-–∞–¥—Ä–µ—Å–æ–≤ –≤ –ø—É–ª–µ!")

def save_config(user_id: str, private_key: str, vpn_ip: str) -> Path:
    """–°–æ–∑–¥–∞—ë—Ç –∫–ª–∏–µ–Ω—Ç—Å–∫–∏–π WireGuard-–∫–æ–Ω—Ñ–∏–≥."""
    CONFIG_DIR.mkdir(parents=True, exist_ok=True)
    content = f"""
[Interface]
PrivateKey = {private_key}
Address = {vpn_ip}/32
DNS = 1.1.1.1

[Peer]
PublicKey = {SERVER_PUBLIC_KEY}
Endpoint = {SERVER_ENDPOINT}
AllowedIPs = 0.0.0.0/0, ::/0
PersistentKeepalive = 25
"""
    path = CONFIG_DIR / f"{user_id}.conf"
    path.write_text(content.strip())
    return path

# ---------------- MAIN ----------------
def main():
    logging.info("=== –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥–æ–≤ WireGuard ===")
    used_ips = {line.strip() for line in Path("used_ips.txt").read_text().splitlines()} if Path("used_ips.txt").exists() else set()

    user_id = input("–í–≤–µ–¥–∏—Ç–µ user_id –∏–ª–∏ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ").strip()
    private_key, public_key = generate_keypair()
    vpn_ip = allocate_ip(used_ips)

    cfg_path = save_config(user_id, private_key, vpn_ip)
    used_ips.add(vpn_ip)
    Path("used_ips.txt").write_text("\n".join(sorted(used_ips)))

    record = {
        "user_id": user_id,
        "public_key": public_key,
        "vpn_ip": vpn_ip,
        "config_file": str(cfg_path)
    }

    Path(f"{user_id}.json").write_text(json.dumps(record, indent=2))
    logging.info(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥ —Å–æ–∑–¥–∞–Ω: {cfg_path}")
    logging.info(f"üîë –ü—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á: {public_key}")
    logging.info("–ó–∞–ø–∏—à–∏ –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑—É backend-–∞ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å –Ω–æ–¥–∞–º–∏.")

if __name__ == "__main__":
    main()
